from confluent_kafka import Consumer
from time import sleep
import os

from sqlalchemy import create_engine
#
# read input data from Kafka producer
# then insert data into Postgresql
#
DB_USERNAME = os.environ["DB_USERNAME"]
DB_PASSWORD = os.environ["DB_PASSWORD"]
DB_HOST     = os.environ["DB_HOST"]
DB_PORT     = os.environ["DB_PORT"]
DB_NAME     = os.environ["DB_NAME"]
KAFKA_CONSUMER   = os.environ["KAFKA_DNS"]
KAFKA_TOPIC      = os.environ["KAFKA_TOPIC"]

SQLALCHEMY_DATABASE_URI = (
        f"postgresql://{DB_USERNAME}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    )
engine = create_engine(SQLALCHEMY_DATABASE_URI)
connection = engine.connect()

class UdaConsumer:

    def __init__(self, broker=KAFKA_CONSUMER, topic=KAFKA_TOPIC, group_id="consumer"):
         self.broker = broker
         self.topic = topic
         self.group_id = group_id

    def start_listener(self):
        consumer_config = {
            'bootstrap.servers': self.broker,
            'group.id': self.group_id,
            'auto.offset.reset':'earliest',
            'enable.auto.commit': 'false',
            'max.poll.interval.ms': '86400000'}

        consumer = Consumer(consumer_config)
        consumer.subscribe([self.topic])

        try:
            while True:
                #print("Listening")
                # read single message at a time
                msg = consumer.poll(0)

                if msg is None:
                    sleep(5)
                    continue
                if msg.error():
                    print("Error reading message : {}".format(msg.error()))
                    continue
                # You can parse message and save to data base here
                location = msg.value().decode('utf-8')
                person_id = int(location["userId"])
                latitude, longitude = int(location["latitude"]), int(location["longitude"])
                # creation_time is generated by the database engine   

                input = "INSERT INTO location (person_id, coordinate) VALUES ({}, ST_Point({}, {}))" \
                         .format(person_id, latitude, longitude)

                connection.execute(input)
   #json.load(message.value.decode())
                consumer.commit()

        except Exception as ex:
            print("Kafka Exception : {}", ex)

        finally:
            print("closing consumer")
            consumer.close()

#RUNNING CONSUMER FOR READING MESSAGE FROM THE KAFKA TOPIC
my_consumer = UdaConsumer(group_id="consumer-1")
my_consumer.start_listener()